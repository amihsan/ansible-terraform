####################### for ec2 aws ###################
---
- hosts: app_server
  become: true
  vars_files:
    - secrets.yml
  tasks:
    - name: Gather EC2 instance metadata
      ec2_metadata_facts:

    - name: Ensure Python 3 is installed (Debian/Ubuntu)
      apt:
        name: python3
        state: present
        update_cache: yes
      when: ansible_facts['os_family'] == "Debian"

    - name: Ensure Python 3 is installed (RHEL/CentOS)
      yum:
        name: python3
        state: present
      when: ansible_facts['os_family'] == "RedHat"

    - name: Install python3-apt (Debian/Ubuntu)
      apt:
        name: python3-apt
        state: present
        update_cache: yes
      when: ansible_facts['os_family'] == "Debian"

    - name: Install Docker if not already installed (Debian/Ubuntu)
      apt:
        name: docker.io
        state: present
        update_cache: yes
      when: ansible_facts['os_family'] == "Debian"

    - name: Install Docker if not already installed (RHEL/CentOS)
      yum:
        name: docker
        state: present
      when: ansible_facts['os_family'] == "RedHat"

    - name: Ensure Docker service is running
      service:
        name: docker
        state: started
        enabled: yes

    - name: Stop all running Docker containers
      shell: |
        docker ps -q | xargs --no-run-if-empty docker stop
      ignore_errors: true

    - name: Remove all stopped Docker containers
      shell: |
        docker ps -a -q | xargs --no-run-if-empty docker rm
      ignore_errors: true

    - name: Remove all unused Docker images
      command: docker image prune -af

    - name: Remove all Docker images
      shell: |
        images=$(docker images -q)
        if [ -n "$images" ]; then
          docker rmi -f $images
        else
          echo "No images to remove"
        fi
      register: remove_images
      changed_when: "'No images to remove' not in remove_images.stdout"

    - name: Pull Flask backend image
      docker_image:
        name: amihsan/flask-terraform-backend:latest
        source: pull

    - name: Pull React frontend image
      docker_image:
        name: amihsan/react-terraform-frontend:latest
        source: pull

    - name: List all Docker images
      command: docker images
      register: docker_images_list

    - name: Show remaining Docker images
      debug:
        var: docker_images_list.stdout_lines

    - name: Create a custom Docker network
      docker_network:
        name: app-network
        driver: bridge

    - name: Debug MONGODB_URI
      debug:
        var: MONGODB_URI

    - name: Run Flask backend container
      docker_container:
        name: flask-app
        image: amihsan/flask-terraform-backend:latest
        state: started
        restart_policy: always
        networks:
          - name: app-network
        published_ports:
          - "5000:5000"
        env:
          MONGODB_URI: "{{ MONGODB_URI }}"
          DATABASE_NAME: "{{ DATABASE_NAME }}"

    - name: Run React frontend container
      docker_container:
        name: react-app
        image: amihsan/react-terraform-frontend:latest
        state: started
        restart_policy: always
        networks:
          - name: app-network
        published_ports:
          - "80:80"
        env:
          REACT_APP_API_URL: "http://{{ ansible_ec2_public_ipv4 }}:5000"
