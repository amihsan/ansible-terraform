---
- hosts: app_server
  become: true
  vars_files:
    - secrets.yml
  tasks:
    - name: Gather EC2 instance metadata
      ec2_metadata_facts:

    - name: Ensure Python 3 is installed (Debian/Ubuntu)
      apt:
        name: python3
        state: present
        update_cache: yes
      when: ansible_facts['os_family'] == "Debian"

    - name: Ensure Python 3 is installed (RHEL/CentOS)
      yum:
        name: python3
        state: present
      when: ansible_facts['os_family'] == "RedHat"

    - name: Install python3-apt (Debian/Ubuntu)
      apt:
        name: python3-apt
        state: present
        update_cache: yes
      when: ansible_facts['os_family'] == "Debian"

    - name: Install Docker if not already installed (Debian/Ubuntu)
      apt:
        name: docker.io
        state: present
        update_cache: yes
      when: ansible_facts['os_family'] == "Debian"

    - name: Install Docker if not already installed (RHEL/CentOS)
      yum:
        name: docker
        state: present
      when: ansible_facts['os_family'] == "RedHat"

    - name: Ensure Docker service is running
      service:
        name: docker
        state: started
        enabled: yes

    - name: Stop all running Docker containers
      shell: |
        docker ps -q | xargs --no-run-if-empty docker stop
      ignore_errors: true

    - name: Remove all stopped Docker containers
      shell: |
        docker ps -a -q | xargs --no-run-if-empty docker rm
      ignore_errors: true

    - name: Remove all unused Docker images
      command: docker image prune -af

    - name: Remove all Docker images
      shell: |
        images=$(docker images -q)
        if [ -n "$images" ]; then
          docker rmi -f $images
        else
          echo "No images to remove"
        fi
      register: remove_images
      changed_when: "'No images to remove' not in remove_images.stdout"

    - name: Update apt package cache
      apt:
        update_cache: yes
      when: ansible_facts['os_family'] == "Debian"

    - name: Install Kubernetes tools
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - kubeadm
        - kubelet
        - kubectl
      when: ansible_facts['os_family'] == "Debian"
      register: k8s_install_result

    - name: Debug Kubernetes installation result
      debug:
        var: k8s_install_result

    - name: Initialize Kubernetes control-plane
      shell: kubeadm init --pod-network-cidr=10.244.0.0/16
      when: ansible_facts['os_family'] == "Debian"
      register: k8s_init_result
      ignore_errors: true

    - name: Debug Kubernetes initialization result
      debug:
        var: k8s_init_result

    - name: Configure kubectl for root
      shell: |
        mkdir -p $HOME/.kube
        cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
        chown $(id -u):$(id -g) $HOME/.kube/config
      when: k8s_init_result is succeeded

    - name: Apply Flannel CNI plugin
      shell: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
      when: k8s_init_result is succeeded

    - name: Template Flask backend deployment file
      template:
        src: ./kubernetes/flask-deployment.yml.j2
        dest: /tmp/flask-deployment.yml

    - name: Template Flask backend service file
      template:
        src: ./kubernetes/flask-service.yml.j2
        dest: /tmp/flask-service.yml

    - name: Template React frontend deployment file
      template:
        src: ./kubernetes/react-deployment.yml.j2
        dest: /tmp/react-deployment.yml

    - name: Template React frontend service file
      template:
        src: ./kubernetes/react-service.yml.j2
        dest: /tmp/react-service.yml

    - name: Apply Flask backend deployment
      shell: kubectl apply -f /tmp/flask-deployment.yml

    - name: Apply Flask backend service
      shell: kubectl apply -f /tmp/flask-service.yml

    - name: Apply React frontend deployment
      shell: kubectl apply -f /tmp/react-deployment.yml

    - name: Apply React frontend service
      shell: kubectl apply -f /tmp/react-service.yml
