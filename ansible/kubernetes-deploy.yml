---
- hosts: app_server
  become: true
  tasks:
    - name: Gather EC2 instance metadata
      ec2_metadata_facts:

    - name: Ensure Python 3 is installed
      package:
        name: python3
        state: present

    - name: Remove conflicting curl-minimal package
      yum:
        name: curl-minimal
        state: absent
      ignore_errors: true

    - name: Install required packages
      yum:
        name: "{{ item }}"
        state: present
      loop:
        - curl
        - socat
        - conntrack
        - bash

    - name: Install K3s
      shell: |
        curl -sfL https://get.k3s.io | sh -
      register: k3s_install
      until: k3s_install is succeeded
      retries: 5
      delay: 10

    - name: Check K3s status
      command: k3s kubectl get nodes
      register: k3s_status

    - debug:
        var: k3s_status.stdout

    # Templating Flask and React deployment and service files
    - name: Template Flask backend deployment file
      template:
        src: ./kubernetes/flask-deployment.yml.j2
        dest: /tmp/flask-deployment.yml

    - name: Template Flask backend service file
      template:
        src: ./kubernetes/flask-service.yml.j2
        dest: /tmp/flask-service.yml

    - name: Template React frontend deployment file
      template:
        src: ./kubernetes/react-deployment.yml.j2
        dest: /tmp/react-deployment.yml

    - name: Template React frontend service file
      template:
        src: ./kubernetes/react-service.yml.j2
        dest: /tmp/react-service.yml

    # Applying deployments and services
    - name: Apply Flask backend deployment
      command: k3s kubectl apply -f /tmp/flask-deployment.yml

    - name: Apply Flask backend service
      command: k3s kubectl apply -f /tmp/flask-service.yml

    - name: Apply React frontend deployment
      command: k3s kubectl apply -f /tmp/react-deployment.yml

    - name: Apply React frontend service
      command: k3s kubectl apply -f /tmp/react-service.yml

    - name: Verify deployment status
      command: k3s kubectl get deployments
      register: deployments_status

    - debug:
        var: deployments_status.stdout
