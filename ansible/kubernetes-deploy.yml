---
- hosts: app_server
  become: true
  tasks:
    - name: Gather EC2 instance metadata
      ec2_metadata_facts:

    - name: Ensure Python 3 is installed
      package:
        name: python3
        state: present

    - name: Remove conflicting curl-minimal package
      yum:
        name: curl-minimal
        state: absent
      ignore_errors: true

    - name: Install required packages individually
      yum:
        name: "{{ item }}"
        state: present
      loop:
        - conntrack
        - socat
        - bash
        - curl

    - name: Install Docker
      package:
        name: docker
        state: present

    - name: Ensure Docker service is running
      service:
        name: docker
        state: started
        enabled: yes

    - name: Stop all running Docker containers
      shell: docker ps -q | xargs --no-run-if-empty docker stop
      ignore_errors: true

    - name: Remove all stopped Docker containers
      shell: docker ps -a -q | xargs --no-run-if-empty docker rm
      ignore_errors: true

    - name: Remove all unused Docker images
      command: docker image prune -af

    - name: Remove all Docker images
      shell: |
        images=$(docker images -q)
        if [ -n "$images" ]; then
          docker rmi -f $images
        else
          echo "No images to remove"
        fi
      register: remove_images
      changed_when: "'No images to remove' not in remove_images.stdout"

    - name: Update system packages
      yum:
        name: "*"
        state: latest

    - name: Download Minikube binary
      get_url:
        url: https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        dest: /usr/local/bin/minikube
        mode: '0755'

    - name: Download kubectl binary
      get_url:
        url: https://storage.googleapis.com/kubernetes-release/release/v1.26.0/bin/linux/amd64/kubectl
        dest: /usr/local/bin/kubectl
        mode: '0755'

    - name: Start Minikube
      command: minikube start --driver=docker
      register: minikube_start
      failed_when: minikube_start.rc != 0

    - name: Verify Minikube status
      command: minikube status
      register: minikube_status

    - debug:
        var: minikube_status.stdout

    # Templating Flask and React deployment and service files
    - name: Template Flask backend deployment file
      template:
        src: ./kubernetes/flask-deployment.yml.j2
        dest: /tmp/flask-deployment.yml

    - name: Template Flask backend service file
      template:
        src: ./kubernetes/flask-service.yml.j2
        dest: /tmp/flask-service.yml

    - name: Template React frontend deployment file
      template:
        src: ./kubernetes/react-deployment.yml.j2
        dest: /tmp/react-deployment.yml

    - name: Template React frontend service file
      template:
        src: ./kubernetes/react-service.yml.j2
        dest: /tmp/react-service.yml

    # Applying deployments and services
    - name: Apply Flask backend deployment
      command: kubectl apply -f /tmp/flask-deployment.yml

    - name: Apply Flask backend service
      command: kubectl apply -f /tmp/flask-service.yml

    - name: Apply React frontend deployment
      command: kubectl apply -f /tmp/react-deployment.yml

    - name: Apply React frontend service
      command: kubectl apply -f /tmp/react-service.yml

    - name: Verify deployment status
      command: kubectl get deployments
      register: deployments_status

    - debug:
        var: deployments_status.stdout
