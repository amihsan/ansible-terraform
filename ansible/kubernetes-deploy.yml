---
- hosts: localhost
  connection: local
  become: false
  tasks:
    - name: Decrypt Ansible Vault secrets
      include_vars:
        file: secrets.yml
        name: secrets

    - name: Check if Minikube is installed
      command: minikube version
      ignore_errors: yes
      register: minikube_installed

    - name: Install Minikube if not installed (Ubuntu example)
      apt:
        name: minikube
        state: present
      when: minikube_installed.rc != 0

    - name: Start Minikube without root privileges
      command: minikube start --driver=docker
      become: false

    - name: Deploy Flask App to Kubernetes
      template:
        src: "{{ playbook_dir }}/../kubernetes/flask-deployment.yml.j2"
        dest: /tmp/flask-deployment.yml
      vars:
        MONGODB_URI: "{{ secrets.MONGODB_URI }}" # Inject decrypted secret
        DATABASE_NAME: "{{ secrets.DATABASE_NAME }}" # Inject decrypted secret

    - name: Apply Flask Deployment
      command: kubectl apply -f /tmp/flask-deployment.yml

    # Deploy React App
    - name: Deploy React App to Kubernetes
      template:
        src: "{{ playbook_dir }}/../kubernetes/react-deployment.yml.j2"
        dest: /tmp/react-deployment.yml
      vars:
        REACT_APP_API_URL: "{{ flask_service_url }}"  

    - name: Apply React Deployment
      command: kubectl apply -f /tmp/react-deployment.yml




# ---
# - hosts: localhost
#   connection: local
#   become: false  # Ensure that the playbook doesn't run tasks as root unnecessarily
#   tasks:
#     - name: Decrypt Ansible Vault secrets
#       include_vars:
#         file: secrets.yml
#         name: secrets

#     - name: Check if Minikube is installed
#       command: minikube version
#       ignore_errors: yes
#       register: minikube_installed

#     - name: Install Minikube if not installed (Ubuntu example)
#       apt:
#         name: minikube
#         state: present
#       when: minikube_installed.rc != 0

#     - name: Start Minikube without root privileges
#       command: minikube start --driver=docker
#       become: false

#     - name: Get Minikube IP
#       command: minikube ip
#       register: minikube_ip

#     # Deploy Flask App
#     - name: Deploy Flask App to Kubernetes
#       template:
#         src: "{{ playbook_dir }}/../kubernetes/flask-deployment.yml.j2"
#         dest: /tmp/flask-deployment.yml
#       vars:
#         minikube_ip: "{{ minikube_ip.stdout }}"
#         MONGODB_URI: "{{ secrets.MONGODB_URI }}"  # Inject decrypted secret
#         DATABASE_NAME: "{{ secrets.DATABASE_NAME }}"  # Inject decrypted secret

#     - name: Apply Flask Deployment
#       command: kubectl apply -f /tmp/flask-deployment.yml

#     # Wait for the Flask app to become available
#     - name: Wait for Flask app to become available
#       pause:
#         seconds: 60  # Adjust the time as needed

#     # Port forward Flask service
#     - name: Port forward Flask service
#       command: kubectl port-forward service/flask-app 5000:5000
#       async: 10  # Allow the command to run in the background
#       poll: 0  # Don't wait for the command to finish
#       register: port_forward_result

#     # Wait for a few seconds to allow port forwarding
#     - name: Wait for a few seconds to allow port forwarding
#       pause:
#         seconds: 5

#     # Wait for Flask service to become reachable
#     - name: Wait for Flask service to become reachable
#       command: "curl -s -o /dev/null -w '%{http_code}' http://127.0.0.1:5000"
#       register: flask_service_status
#       retries: 5
#       delay: 5
#       until: flask_service_status.stdout == "200"

#     # Get Flask service URL
#     - name: Get Flask service URL
#       command: "echo http://127.0.0.1:5000"
#       register: flask_service_url

#     # Deploy React App
#     - name: Deploy React App to Kubernetes
#       template:
#         src: "{{ playbook_dir }}/../kubernetes/react-deployment.yml.j2"
#         dest: /tmp/react-deployment.yml
#       vars:
#         minikube_ip: "{{ minikube_ip.stdout }}"
#         REACT_APP_API_URL: "{{ flask_service_url.stdout }}"  # Use the dynamically obtained Flask URL

#     - name: Apply React Deployment
#       command: kubectl apply -f /tmp/react-deployment.yml

