name: Deploy to EC2 with Terraform and Ansible

on:
  push:
    branches:
      - main

permissions:
  id-token: write # Grants permission to write ID token for OIDC authentication
  contents: read # Grants read access to repository contents (files and code)

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Configure AWS Credentials for Terraform and Ansible
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsTerraformRole
          aws-region: eu-central-1

      # Step 3: Set up Python Environment for Ansible
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.x"

      # Step 4: Install Ansible Dependencies
      - name: Install Ansible Dependencies
        run: pip install ansible

      # Step 5: Docker Login
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 6: Build and Push Docker Images
      - name: Build and Push Docker Images
        run: |
          docker build --no-cache -t ${{ secrets.DOCKER_USERNAME }}/flask-terraform-backend:latest ./backend
          docker push ${{ secrets.DOCKER_USERNAME }}/flask-terraform-backend:latest
          docker build --no-cache -t ${{ secrets.DOCKER_USERNAME }}/react-terraform-frontend:latest ./frontend
          docker push ${{ secrets.DOCKER_USERNAME }}/react-terraform-frontend:latest

      # Step 7: Set Up Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      # Step 8: Ensure S3 Bucket for Terraform State Exists
      - name: Ensure S3 Bucket for Terraform State Exists
        run: |
          set -eux
          BUCKET_EXISTS=$(aws s3api head-bucket --bucket ${{ secrets.AWS_S3_BUCKET }} 2>&1 || echo "not found")
          if [[ "$BUCKET_EXISTS" == *"Not Found"* ]]; then
            echo "Creating S3 bucket for Terraform state..."
            aws s3api create-bucket --bucket ${{ secrets.AWS_S3_BUCKET }} --region eu-central-1 --create-bucket-configuration LocationConstraint=${{ secrets.AWS_REGION }}
            aws s3api put-bucket-versioning --bucket ${{ secrets.AWS_S3_BUCKET }} --versioning-configuration Status=Enabled
            aws s3api put-bucket-encryption --bucket ${{ secrets.AWS_S3_BUCKET }} --server-side-encryption-configuration '{
              "Rules": [{
                "ApplyServerSideEncryptionByDefault": {
                  "SSEAlgorithm": "AES256"
                }
              }]
            }'
          else
            echo "S3 bucket already exists."
          fi

      # Step 9: Clean Up Local Terraform State (First Run)
      - name: Clean Up Local Terraform State
        run: |
          set -eux
          rm -rf terraform/.terraform

      # Step 10: Initialize Terraform with Local Backend
      - name: Terraform Init (Local Backend)
        run: |
          set -eux
          cd terraform
          terraform init -backend=false

      # Step 11: Reconfigure Terraform with Remote Backend
      - name: Terraform Init (Remote Backend)
        run: |
          set -eux
          cd terraform
          terraform init -reconfigure

      # Step 12: Terraform Plan
      - name: Terraform Plan
        run: |
          set -eux
          cd terraform
          terraform plan -out=tfplan

      # Step 13: Apply Terraform Plan
      - name: Terraform Apply
        run: |
          set -eux
          cd terraform
          terraform apply -auto-approve tfplan

      # Step 14: Debug Terraform Outputs
      - name: Debug Terraform Outputs
        run: |
          cd terraform
          terraform output

      # Step 15: Extract EC2 Public IP from Terraform Outputs
      - name: Extract EC2 Public IP
        id: tf_output
        run: |
          cd terraform
          PUBLIC_IP=$(terraform output -raw instance_public_ip | tr -d '[:space:]' | grep -oP '\d+\.\d+\.\d+\.\d+' | head -n 1)
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
          echo "Extracted PUBLIC_IP: $PUBLIC_IP"

      # Step 16: Update Ansible Inventory with EC2 Public IP
      - name: Update Ansible Inventory
        run: |
          echo "[app_server]" > ansible/hosts
          echo "$PUBLIC_IP ansible_ssh_user=ec2-user ansible_ssh_private_key_file=/home/runner/.ssh/id_rsa" >> ansible/hosts
        env:
          PUBLIC_IP: ${{ env.PUBLIC_IP }}

      # Step 17: Print Ansible Inventory for Debugging
      - name: Print Ansible Inventory for Debugging
        run: cat ansible/hosts

      # Step 18: Set Up Ansible Vault Password from GitHub Secret
      - name: Set Up Ansible Vault Password
        run: echo "${{ secrets.ANSIBLE_VAULT_PASSWORD }}" > ~/.ansible_vault_pass

      # Step 19: Set Up SSH Key for EC2 Access
      - name: Set Up SSH Key for EC2 Access
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.ANSIBLE_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.PUBLIC_IP }} >> ~/.ssh/known_hosts

      # Step 20: Verify SSH Key Setup and Test Connection
      - name: Verify SSH Key and Test Connection
        run: |
          ls -lah ~/.ssh
          cat ~/.ssh/id_rsa | head -n 5  # Check key (remove after debugging)
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${{ env.PUBLIC_IP }} "echo SSH Connection Successful"

      # Step 21: Execute Ansible Playbook for EC2 Configuration
      - name: Run Ansible Playbook
        run: |
          ansible-playbook -i ansible/hosts ansible/ec2-aws-playbook.yml --vault-password-file ~/.ansible_vault_pass
        env:
          ANSIBLE_HOST_KEY_CHECKING: "false"
          ANSIBLE_PRIVATE_KEY_FILE: /home/runner/.ssh/id_rsa
