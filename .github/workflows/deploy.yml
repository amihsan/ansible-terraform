name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python for Ansible
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.x"

      # Step 3: Install Ansible dependencies
      - name: Install dependencies
        run: |
          pip install ansible

      # Step 4: Login to Dockerhub
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # # Step 5: Build and push Docker images for the backend and frontend
      # - name: Build and Push Docker Images
      #   run: |
      #     docker build --no-cache -t ${{ secrets.DOCKER_USERNAME }}/flask-terraform-backend:latest ./backend
      #     docker push ${{ secrets.DOCKER_USERNAME }}/flask-terraform-backend:latest
      #     docker build --no-cache -t ${{ secrets.DOCKER_USERNAME }}/react-terraform-frontend:latest ./frontend
      #     docker push ${{ secrets.DOCKER_USERNAME }}/react-terraform-frontend:latest

      # Step 6: Run Terraform to provision AWS infrastructure
      - name: Run Terraform
        run: |
          cd infrastructure
          terraform init
          terraform import aws_security_group.app_sg sg-0eb59c9afe84cfe18 || true
          terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Step 7: Capture the EC2 public IP from Terraform output
      - name: Get EC2 Public IP from Terraform
        id: tf_output
        run: |
          cd infrastructure
          PUBLIC_IP=$(terraform output -raw public_ip)
          echo "::set-output name=PUBLIC_IP::$PUBLIC_IP"

      # Step 8: Update Ansible inventory with the EC2 public IP
      - name: Update Ansible Inventory
        run: |
          echo "[app_server]" > ansible/hosts
          echo "${{ steps.tf_output.outputs.PUBLIC_IP }} ansible_ssh_user=ec2-user ansible_ssh_private_key_file=/home/runner/.ssh/id_rsa" >> ansible/hosts

      # Step 9: Setup Ansible vault password in github secret
      - name: Set up Ansible Vault password
        run: echo "${{ secrets.ANSIBLE_VAULT_PASSWORD }}" > ~/.ansible_vault_pass

      # Step 10: Create .ssh directory and SSH private key file
      - name: Create .ssh directory and SSH key file
        run: |
          mkdir -p /home/runner/.ssh
          echo "${{ secrets.ANSIBLE_PRIVATE_KEY }}" > /home/runner/.ssh/id_rsa
          chmod 600 /home/runner/.ssh/id_rsa

      # Step 11: Run the Ansible playbook to configure the EC2 instance
      - name: Run Ansible Playbook
        run: |
          ansible-playbook -i ansible/hosts ansible/playbook.yml --vault-password-file ~/.ansible_vault_pass
        env:
          ANSIBLE_HOST_KEY_CHECKING: "false"
          ANSIBLE_PRIVATE_KEY_FILE: /home/runner/.ssh/id_rsa
